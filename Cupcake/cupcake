#!/bin/bash

# mocaccino cupcake bash script
# build a dotnet solution
# version 0.0.1

buildNewClass() {
    classNamespace=$2
    className=$1
    echo -e "namespace $classNamespace\n{\n\tpublic class $className\n\t{\n\t\t\n\t}\n}\n" > $className
}

buildCoreProject() {

    echo -e "\n üìÇ Scaffold of core project under construction.\n"

    cd src

    mkdir core
    cd core

    dotnet new classlib -f netstandard2.1 --name $solutionName.Domain
    dotnet new classlib -f netstandard2.1 --name $solutionName.Application

    cd $solutionName.Domain \
        && mkdir Entities \
       	&& mkdir Enums \
       	&& mkdir Settings

    cd Settings
    buildNewClass MailSettings.cs $solutionName.Domain.Settings
    

    cd ../../$solutionName.Application \
        && dotnet add reference ../$solutionName.Domain/$solutionName.Domain.csproj \
        && dotnet add package MediatR \
        && dotnet add package MediatR.Extensions.Microsoft.DependencyInjection \
        && dotnet add package Microsoft.Extensions.Logging.Abstractions \
        && dotnet add package FluentValidation \
        && dotnet add package FluentValidation.DependencyInjectionExtensions \
        && dotnet add package Microsoft.EntityFrameworkCore \
        && dotnet add package AutoMapper \
        && dotnet add package AutoMapper.Extensions.Microsoft.DependencyInjection

    mkdir Common
    mkdir Dtos

    cd Common \
        && mkdir Behaviors \
        && mkdir Exceptions \
        && mkdir Interfaces \
        && mkdir Mappings
    
    cd Behaviors
    buildNewClass LoggingBehavior.cs $solutionName.Application.Common.Behaviors
    buildNewClass PerformanceBehavior.cs $solutionName.Application.Common.Behaviors
    buildNewClass UnhandledExceptionBehavior.cs $solutionName.Application.Common.Behaviors
    buildNewClass ValidationBehavior.cs $solutionName.Application.Common.Behaviors

    cd ../Exceptions
    buildNewClass ApiException.cs $solutionName.Application.Common.Exceptions
    buildNewClass NotFoundException.cs $solutionName.Application.Common.Exceptions
    buildNewClass ValidationException.cs $solutionName.Application.Common.Exceptions

    cd ../Interfaces
    buildNewClass IApplicationDbContext.cs $solutionName.Application.Common.Interfaces
    buildNewClass ICsvFileBuilder.cs $solutionName.Application.Common.Interfaces
    buildNewClass IDateTime.cs $solutionName.Application.Common.Interfaces
    buildNewClass IEmailService.cs $solutionName.Application.Common.Interfaces

    cd ../Mappings
    buildNewClass IMapForm.cs $solutionName.Application.Common.Mappings
    buildNewClass MappingProfile.cs $solutionName.Application.Common.Mappings

    cd ../../Dtos
    mkdir Email
    cd Email
    buildNewClass EmailDto.cs $solutionName.Application.Dtos.Email
    
    cd ../..
    buildNewClass DependencyInjection.cs $solutionName.Application

    cd ../..
}


buildInfrastructureProject() {

    echo -e "\n üìÇ Scaffold of infrastructure project under construction.\n"

    mkdir infrastructure
    cd infrastructure

    dotnet new classlib -f net5.0 --name $solutionName.Data
    dotnet new classlib -f net5.0 --name $solutionName.Shared

    cd $solutionName.Data \
        && mkdir Contexts \
        && dotnet add reference ../../core/$solutionName.Domain/$solutionName.Domain.csproj \
        && dotnet add reference ../../core/$solutionName.Application/$solutionName.Application.csproj

    dotnet add package Microsoft.EntityFrameworkCore.Sqlite

    cd Contexts
    buildNewClass ApplicationDbContext.cs $solutionName.Data.Contexts

    cd ..
    mkdir Migrations

    buildNewClass DependencyInjection.cs $solutionName.Data

    cd ../$solutionName.Shared \
        && dotnet add reference ../../core/$solutionName.Application/$solutionName.Application.csproj \
        && dotnet add package MailKit \
        && dotnet add package Microsoft.Extensions.Options.ConfigurationExtensions \
        && dotnet add package MimeKit \
        && dotnet add package CsvHelper
    mkdir Files
    mkdir 

    cd ../..
}


buildPresentationProject() {

    echo -e "\n üìÇ Scaffold of presentation project under construction.\n"

    mkdir presentation
    cd presentation
    dotnet new webapi --name $solutionName.WebApi \
        && cd $solutionName.WebApi \
        && dotnet add reference ../../core/$solutionName.Application/$solutionName.Application.csproj \
        && dotnet add reference ../../infrastructure/$solutionName.Data/$solutionName.Data.csproj \
        && dotnet add reference ../../infrastructure/$solutionName.Shared/$solutionName.Shared.csproj \
        && dotnet add package Microsoft.EntityFrameworkCore.Design \
        && dotnet add package Microsoft.EntityFrameworkCore.Sqlite

    cd ../../..
}

addingProjectsToTheSolution() {

    echo -e "\n ‚ûï Now all projects will be added to the solution.\n"

    dotnet sln add src/core/$solutionName.Domain/$solutionName.Domain.csproj
    dotnet sln add src/core/$solutionName.Application/$solutionName.Application.csproj
    dotnet sln add src/infrastructure/$solutionName.Data/$solutionName.Data.csproj
    dotnet sln add src/infrastructure/$solutionName.Shared/$solutionName.Shared.csproj
    dotnet sln add src/presentation/$solutionName.WebApi/$solutionName.WebApi.csproj
}

buildSolution() {

    solutionName=$1

    excluded="bin/"
    excluded+="\nobj/"

    echo -e "\n üÜï Scaffold of new solution: \"$solutionName\" under construction\n"

    mkdir $solutionName
    cd $solutionName \
        && dotnet new sln

	dotnet new tool-manifest \
		&& dotnet tool install dotnet-ef

	echo -e "$excluded" >> .gitignore
	echo -e "# $solutionName\n" >> README.md

	mkdir bin
	mkdir src

	buildCoreProject $solutionName
	buildInfrastructureProject $solutionName
	buildPresentationProject $solutionName
	addingProjectsToTheSolution $solutionName

    echo -e "\n üÜó Well, a solution .NET named: \"$solutionName\" has just been generated.\n"
}

main() {
	if [ "$1" != '' ]; then
		buildSolution $1
	else
    		echo -e "\n ‚ùå I am sorry, you forgot to pass the solution name!\n"
	fi
}

# passing one argument to the main function

main $1
